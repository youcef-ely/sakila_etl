version: '3.8' # Use a recent Docker Compose version

services:
  # Source MySQL Database
  mysql-source:
    image: mysql:8.0
    container_name: mysql-source
    environment:
      MYSQL_ROOT_PASSWORD: sourcepass
      MYSQL_DATABASE: sakila
    ports:
      - "3306:3306"
    volumes:
      - mysql_source_data:/var/lib/mysql
      - ./sql/source:/docker-entrypoint-initdb.d # Ensure your SQL init scripts are here
    networks:
      - etl_network
    healthcheck: # Added healthcheck for better dependency management
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-psourcepass"]
      interval: 5s
      timeout: 10s
      retries: 5

  # Data Warehouse MySQL
  mysql-warehouse:
    image: mysql:8.0
    container_name: mysql-warehouse
    environment:
      MYSQL_ROOT_PASSWORD: warehousepass
      MYSQL_DATABASE: sakila_dw
    ports:
      - "3307:3306" # Mapped to 3307 on host to avoid conflict with source
    volumes:
      - mysql_warehouse_data:/var/lib/mysql
      - ./sql/warehouse:/docker-entrypoint-initdb.d # Ensure your SQL init scripts are here
    networks:
      - etl_network
    healthcheck: # Added healthcheck
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pwarehousepass"]
      interval: 5s
      timeout: 10s
      retries: 5

  # Airflow Database
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - etl_network
    healthcheck: # Added healthcheck
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Airflow Webserver
  airflow-webserver:
    build: . # Assumes a Dockerfile in the current directory for Airflow
    container_name: airflow-webserver
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here # IMPORTANT: Change this to a strong, unique key!
      - AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME=admin
      - AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD=admin
      # Spark-related environment variables for Airflow to know where Spark is
      - SPARK_HOME=/opt/spark/spark-3.5.0-bin-hadoop3 # Adjust if your Spark version/path differs
      - HADOOP_CONF_DIR=/etc/hadoop
      - YARN_CONF_DIR=/etc/hadoop
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./spark:/opt/spark # Mount your Spark client/apps directory
      - ./data:/opt/data
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - etl_network

  # Airflow Scheduler
  airflow-scheduler:
    build: . # Assumes a Dockerfile in the current directory for Airflow
    container_name: airflow-scheduler
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be healthy
      airflow-webserver:
        condition: service_started # Webserver needs to be up for database init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here # IMPORTANT: Use the same key as webserver!
      # Spark-related environment variables for Airflow to know where Spark is
      - SPARK_HOME=/opt/spark/spark-3.5.0-bin-hadoop3 # Adjust if your Spark version/path differs
      - HADOOP_CONF_DIR=/etc/hadoop
      - YARN_CONF_DIR=/etc/hadoop
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./spark:/opt/spark # Mount your Spark client/apps directory
      - ./data:/opt/data
    command: scheduler
    networks:
      - etl_network

  
volumes:
  mysql_source_data:
  mysql_warehouse_data:
  postgres_data:

networks:
  etl_network:
    driver: bridge